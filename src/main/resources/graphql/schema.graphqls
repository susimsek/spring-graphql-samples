directive @uppercase on FIELD_DEFINITION
directive @lowercase on FIELD_DEFINITION
directive @capitalize on FIELD_DEFINITION
directive @trim on FIELD_DEFINITION

directive @NotBlank(message : String = "graphql.validation.NotBlank.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Email(message : String = "graphql.validation.Email.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Pattern(regexp : String! =".*", message : String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

scalar OffsetDateTime
scalar Locale

type Query {
    users(page: Int, size: Int, filter: UserFilter, orders: [UserOrder!]): [UserPayload!]!
    userById(id: ID!): User
    userByUsername(username: String!): User
    usersByActivated(activated: Boolean!): [User]
    count: Int!
    me: UserPayload!
    post(id: ID!): PostPayload!
    externalPost(id: ID!): PostPayload!
    posts(page: Int, size: Int, orders: [PostOrder!]): [PostPayload!]!
}

type Mutation {
    login(input: LoginInput!): Token!
    createUser(input: AddUserInput!): UserPayload!
    createPost(input: AddPostInput!): PostPayload!
    updatePost(input: UpdatePostInput!): PostPayload!
    deletePost(id: ID!): ID!
}

type Subscription{
    postAdded: PostPayload!
}

input LoginInput {
    login: String! @NotBlank @Size(min: 4, max: 50)
    password: String! @NotBlank @Size(min: 4, max: 100)
}

input AddUserInput {
    username: String! @NotBlank @Size(min: 4, max: 50) @Pattern(regexp: "^[A-Za-z][A-Za-z0-9_]+$")
    password: String! @NotBlank @Size(min: 4, max: 100)
    firstName: String! @NotBlank @Size(max: 50) @Pattern(regexp: "^[A-Za-z]+$")
    lastName: String! @NotBlank @Size(max: 50) @Pattern(regexp: "^[A-Za-z]+$")
    email: String! @NotBlank @Email @Size(min: 5, max: 254)
    lang: Locale
}

enum UserOrderField {
    id
    username
    firstName
    lastName
    email
    createdDate
}

enum OrderType {
    ASC
    DESC
}

input UserFilter {
    username: String
    firstName: String
    lastName: String
    email: String
}

input UserOrder {
    field: UserOrderField!
    order: OrderType
}

input AddPostInput {
    title: String!
    content: String!
}

input UpdatePostInput {
    id: ID!
    title: String!
    content: String!
}

enum PostStatus {
    DRAFT, PENDING_MODERATION, PUBLISHED
}

enum PostOrderField {
    id
    title
    createdDate
}

input PostOrder {
    field: PostOrderField!
    order: OrderType
}

type UserPayload {
    id: ID!
    username: String!
    firstName: String!
    lastName: String!
    name: String!
    email: String!
    createdDate: OffsetDateTime!
    posts: [PostPayload!]!
    lang: Locale!
}


type User {
    id: ID!
    username: String! @uppercase
    firstName: String!
    lastName: String!
    email: String!
    createdDate: OffsetDateTime!
    activated: Boolean!
    lang: Locale!
}

type PostPayload{
    id: ID!
    title: String! @trim @capitalize
    content: String! @lowercase
    status: PostStatus!
    createdDate: OffsetDateTime!
    author: UserPayload!
    locale: Locale
}

type Token {
    token: String!
}