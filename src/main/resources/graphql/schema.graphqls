directive @uppercase on FIELD_DEFINITION
directive @lowercase on FIELD_DEFINITION
directive @capitalize on FIELD_DEFINITION
directive @trim on FIELD_DEFINITION

directive @NotBlank(message : String = "graphql.validation.NotBlank.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Size(min : Int = 0, max : Int = 2147483647, message : String = "graphql.validation.Size.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Email(message : String = "graphql.validation.Email.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Pattern(regexp : String! =".*", message : String = "graphql.validation.Pattern.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Max(value : Int! = 2147483647, message : String = "graphql.validation.Max.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
directive @Min(value : Int! = 0, message : String = "graphql.validation.Min.message") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

scalar DateTime
scalar Date
scalar Locale
scalar JSON
scalar BigDecimal
scalar UUID
scalar Url
scalar Currency
scalar CountryCode

type Query {
    users(page: Int @Min(value : 0), size: Int @Min(value : 1) @Max(value : 100), filter: UserFilter, orders: [UserOrder!]): UserSearchResult!
    userById(id: ID! @NotBlank): User
    userByUsername(username: String! @NotBlank): User
    usersByActivated(activated: Boolean!): [User]
    count: Int!
    me: UserPayload!
    post(id: ID! @NotBlank): PostPayload!
    externalPost(id: ID! @NotBlank): PostPayload!
    posts(page: Int @Min(value : 0), size: Int @Min(value : 1), orders: [PostOrder!]): PostSearchResult!
    # postsWithCursorPagination(first: Int  @Min(value : 1), last: Int @Min(value : 1), before: String, after: String): PostPayloadConnection!
    searchPosts(page: Int @Min(value : 0), size: Int @Min(value : 1), searchPhrase: String! @Size(min: 3)): [PostPayload!]!
    hello: Message!
}

type Mutation {
    login(input: LoginInput!): TokenPayload!
    refreshToken(refreshToken: String @NotBlank): TokenPayload!
    logout: Boolean!
    createUser(input: AddUserInput!): UserPayload!
    activateAccount(token: String! @NotBlank): Boolean!
    forgotPassword(email: String! @NotBlank @Email @Size(min: 5, max: 254)): Boolean!
    resetPassword(input: ResetPasswordInput!): Boolean!
    changePassword(input: ChangePasswordInput!): Boolean!
    createPost(input: AddPostInput!): PostPayload!
    updatePost(input: UpdatePostInput!): PostPayload!
    deletePost(id: ID!): ID!
    createCompletion(input: TextCompletionInput!): TextCompletionPayload!
    createImage(input: ImageInput!): ImagePayload!
    createModeration(input: TextModerationInput!): TextModerationPayload!
}

type Subscription{
    postAdded: PostPayload!
}

input LoginInput {
    login: String! @NotBlank @Size(min: 4, max: 50)
    password: String! @NotBlank @Size(min: 4, max: 100)
}

input ChangePasswordInput {
    currentPassword: String! @NotBlank
    newPassword: String! @NotBlank @Size(min: 4, max: 100)
}

input ResetPasswordInput {
    token: String! @NotBlank
    newPassword: String! @NotBlank @Size(min: 4, max: 100)
}

input AddUserInput {
    username: String! @NotBlank @Size(min: 4, max: 50) @Pattern(regexp: "^[A-Za-z][A-Za-z0-9_]+$")
    password: String! @NotBlank @Size(min: 4, max: 100)
    firstName: String! @NotBlank @Size(max: 50) @Pattern(regexp: "^[A-Za-z]+$")
    lastName: String! @NotBlank @Size(max: 50) @Pattern(regexp: "^[A-Za-z]+$")
    email: String! @NotBlank @Email @Size(min: 5, max: 254)
    lang: Locale
}

enum UserOrderField {
    id
    username
    firstName
    lastName
    email
    createdAt
}

enum OrderType {
    ASC
    DESC
}

enum RoleName {
    ROLE_USER
    ROLE_ADMIN
}

input UserFilter {
    username: String
    firstName: String
    lastName: String
    email: String
}

input UserOrder {
    field: UserOrderField!
    order: OrderType
}

input AddPostInput {
    title: String!
    content: String!
}

input UpdatePostInput {
    id: ID!
    title: String!
    content: String!
}

enum PostStatus {
    DRAFT, PENDING_MODERATION, PUBLISHED
}

enum PostOrderField {
    id
    title
    createdAt
}

type PostSearchResult {
    pageInfo: PageInfo!
    content: [PostPayload!]!
}

input PostOrder {
    field: PostOrderField!
    order: OrderType
}

input TextCompletionInput {
    prompt: String! @NotBlank @Size(min: 3)
}

input TextModerationInput {
    input: String! @NotBlank @Size(min: 3)
}

input ImageInput {
    prompt: String! @NotBlank @Size(min: 3)
}

type MessagePayload {
    content: String!
}

type Message {
    id: UUID!
    url: Url!
    content: JSON!
    sentDate: Date!
    price: BigDecimal!
    currency: Currency!
    countryCode: CountryCode!
}

type PageInfo {
    pageNumber: Int!
    totalCount: Int!
    totalPages: Int!
    hasNext: Boolean!
    hasPrev: Boolean!
    nextPage: Int
    prevPage: Int
}

type UserSearchResult {
    pageInfo: PageInfo!
    content: [UserPayload!]!
}

type UserPayload {
    id: ID!
    username: String!
    firstName: String!
    lastName: String!
    name: String!
    email: String!
    createdAt: DateTime!
    posts: [PostPayload!]!
    lang: Locale!
    roles: [Role!]!
}


type User {
    id: ID!
    username: String! @uppercase
    firstName: String!
    lastName: String!
    email: String!
    createdAt: DateTime!
    activated: Boolean!
    lang: Locale!
    roles: [Role!]!
}

type Role {
    id: String!
    name: RoleName!
}

type PostPayload{
    id: ID!
    title: String! @trim @capitalize
    content: String! @lowercase
    status: PostStatus!
    createdAt: DateTime!
    author: UserPayload!
    locale: Locale
}

type TokenPayload {
    accessToken: String!
    refreshToken: String!
    tokenType: String!
    accessTokenExpiresIn: Int!
    refreshTokenExpiresIn: Int!
}

type FileUploadPayload {
    id: String!
}

type TextCompletionPayload {
    choices: [CompletionChoice!]!
    created: Int!
    id: String!
    model: String!
    object: String!
    usage: Usage!
}

type CompletionChoice {
    finishReason: String!
    index: Int!
    logprobs: JSON
    text: String!
}

type Usage {
    completionTokens: Int!
    promptTokens: Int!
    totalTokens: Int!
}


type ImagePayload {
    created: Int!
    data: [ImageData!]!
}

type ImageData {
    url: String!
}

type TextModerationPayload {
    id: String!
    model: String!
    results: [TextModeration!]!
}

type TextModeration {
    categoryScores: ModerationCategoryScore!
    flagged: Boolean!
    categories: ModerationCategory!
}

type ModerationCategoryScore {
    hateThreatening: Float!
    sexualMinors: Float!
    hate: Float!
    selfHarm: Float!
    sexual: Float!
    violenceGraphic: Float!
    violence: Float!
}

type ModerationCategory {
    hateThreatening: Boolean!
    sexualMinors: Boolean!
    hate: Boolean!
    selfHarm: Boolean!
    sexual: Boolean!
    violenceGraphic: Boolean!
    violence: Boolean!
}