scalar OffsetDateTime

type Query {
    userById(id: ID!): User
    userByUsername(username: String!): User
    usersByActivated(activated: Boolean!): [User]
    count: Int
    me: UserPayload
    post(id: ID!): PostPayload!
    externalPost(id: ID!): PostPayload!
    posts(page: Int, size: Int, orders: [PostOrder!]): [PostPayload!]!
}

type Mutation {
    login(input: LoginInput!): Token!
    createUser(input: AddUserInput!): UserPayload!
    createPost(input: AddPostInput!): PostPayload!
    updatePost(input: UpdatePostInput!): PostPayload!
    deletePost(id: ID!): ID!
}

type Subscription{
    postAdded: PostPayload!
}

input LoginInput {
    login: String!
    password: String!
}

input AddUserInput {
    username: String!
    password: String!
    firstName: String!
    lastName: String!
    email: String!
}

enum UserOrderField {
    id
    username
    firstName
    lastName
    email
    createdDate
}

enum OrderType {
    ASC
    DESC
}

input UserFilter {
    username: String
    firstName: String
    lastName: String
    email: String
}

input UserOrder {
    field: UserOrderField!
    order: OrderType
}

input AddPostInput {
    title: String!
    content: String!
}

input UpdatePostInput {
    id: ID!
    title: String!
    content: String!
}

enum PostStatus {
    DRAFT, PENDING_MODERATION, PUBLISHED
}

enum PostOrderField {
    id
    title
    createdDate
}

input PostOrder {
    field: PostOrderField!
    order: OrderType
}

type UserPayload {
    id: ID!
    username: String
    firstName: String
    lastName: String
    name: String
    email: String
    createdDate: OffsetDateTime
    posts: [PostPayload]
}


type User {
    id: ID
    username: String
    firstName: String
    lastName: String
    email: String
    createdDate: OffsetDateTime
    activated: Boolean
}

type PostPayload{
    id: ID!
    title: String!
    content: String!
    status: PostStatus!
    createdDate: OffsetDateTime!
    author: UserPayload!
}

type Token {
    token: String!
}